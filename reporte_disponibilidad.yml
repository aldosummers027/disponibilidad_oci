---
- name: Generar Reporte Final de Horas de Actividad para TODAS las VMs
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    tenancy_ocid: "ocid1.tenancy.oc1..aaaaaaaadubbgctqd2ycibpstffwccwb4m4xfcccbfjhu3yldelqprhfzuxq"
    output_csv_file: "./reporte_horas_final_{{ now(fmt='%Y-%m-%d') }}.csv"
    total_hours: 720

    hoy: "{{ now(utc=True) }}"
    mes_pasado: >-
      {% if hoy.month == 1 %}12{% else %}{{ hoy.month - 1 }}{% endif %}
    ano_de_mes_pasado: >-
      {% if hoy.month == 1 %}{{ hoy.year - 1 }}{% else %}{{ hoy.year }}{% endif %}
    start_time: "{{ ano_de_mes_pasado }}-{{ '%02d' | format(mes_pasado|int) }}-01T00:00:00Z"
    end_time: "{{ hoy.strftime('%Y-%m-01') }}T00:00:00Z"

  tasks:
    - name: Paso 1 - Obtener TODOS los compartimentos
      oracle.oci.oci_identity_compartment_facts:
        parent_compartment_id: "{{ tenancy_ocid }}"
        access_level: "ANY"
        compartment_id_in_subtree: true
      register: all_compartments_result

    - name: Paso 2 - Crear mapa de ID de Compartimento a Nombre
      ansible.builtin.set_fact:
        compartment_name_map: "{{ all_compartments_result.compartments | items2dict(key_name='id', value_name='name') }}"
      run_once: true

    - name: Paso 3 - Crear mapa de ID de Compartimento a ID de Padre
      ansible.builtin.set_fact:
        compartment_parent_id_map: "{{ all_compartments_result.compartments | items2dict(key_name='id', value_name='compartment_id') }}"
      run_once: true

    - name: Paso 6 - Crear el archivo CSV y escribir la cabecera
      ansible.builtin.copy:
        dest: "{{ output_csv_file }}"
        content: "compartment_name,subcompartment,VM_name,Active_hours,Total_hours,Availability"
        force: yes
      run_once: true

    - name: Paso 7 - Obtener todas las VMs de todos los compartimentos
      oracle.oci.oci_compute_instance_facts:
        compartment_id: "{{ item.id }}"
      loop: "{{ all_compartments_result.compartments }}"
      register: instances_data_raw

    - name: Paso 8 - Unificar la lista de VMs
      ansible.builtin.set_fact:
        all_vms: "{{ instances_data_raw.results | map(attribute='instances') | flatten }}"
      run_once: true

    - name: Paso 9 - Procesar la disponibilidad de cada VM
      ansible.builtin.include_tasks: process_vm_availability.yml
      loop: "{{ all_vms }}"
      loop_control:
        loop_var: vm
      when: vm.lifecycle_state != 'TERMINATED'